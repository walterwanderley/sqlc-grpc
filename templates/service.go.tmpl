// Code generated by sqlc-grpc (https://github.com/walterwanderley/sqlc-grpc). DO NOT EDIT.

package {{.Package}}

import (
	"context"
	"database/sql"
	"encoding/json"
	"fmt"
	"log/slog"
	"net"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/jackc/pgx/v5/pgxpool"
	"google.golang.org/protobuf/types/known/timestamppb"
	"google.golang.org/protobuf/types/known/wrapperspb"

	pb "{{ .GoModule}}/api/{{.Package}}/v1"
	"{{.GoModule}}/internal/validation"
)
	
type Service struct {
    pb.Unimplemented{{ .Package | PascalCase}}ServiceServer
	querier {{if .EmitInterface}}Querier{{else}}*Queries{{end}}
	{{if .EmitDbArgument}}db {{if eq .SqlPackage "database/sql"}}*sql.DB{{else}}*pgxpool.Pool{{end}}{{end}}
}

{{$emitDbArgument := .EmitDbArgument}}
{{ range .Services }}
func (s *Service) {{.Name | PascalCase}}(ctx context.Context, req *pb.{{.Name | PascalCase}}Request) (*pb.{{.Name | PascalCase}}Response, error) {
	{{ range . | Input}}{{ .}}
	{{end}}
	{{if not .EmptyOutput}}result, {{end}}err := s.querier.{{ .Name}}(ctx{{if $emitDbArgument}}, s.db{{end}}{{ .ParamsCallDatabase}})
	if err != nil {
		slog.Error("{{.Name}} sql call failed", "error", err)			
		return nil, err
	}
	{{ range . | Output}}{{ .}}
	{{end -}}
}
{{ end }}
{{if not .EmitInterface}}{{if not $emitDbArgument}}
func (s *Service) WithTx(tx {{if eq .SqlPackage "pgx/v5"}}pgx.Tx{{else}}*sql.Tx{{end}}) *Service {
	return &Service{
		querier: s.querier.WithTx(tx),
	}
}
{{end}}{{end}}